package br.com.gerenciador.api.service;

import br.com.gerenciador.api.dto.FornecedorRequestDTO;
import br.com.gerenciador.api.dto.FornecedorResponseDTO;
import java.util.List;

/**
 * ðŸ“Œ Interface que define os serviÃ§os relacionados Ã  entidade `Fornecedor`.
 *
 * ðŸš€ **O que Ã© essa arquitetura?**
 * âœ… Essa abordagem segue o padrÃ£o **Service Layer (Camada de ServiÃ§o)**.
 * âœ… **Separa a lÃ³gica de negÃ³cios da camada de controle (Controller)**, melhorando a organizaÃ§Ã£o.
 * âœ… **Usamos uma `interface` para desacoplar a definiÃ§Ã£o da implementaÃ§Ã£o** (princÃ­pio da inversÃ£o de dependÃªncia - SOLID).
 * âœ… A implementaÃ§Ã£o real dos mÃ©todos estarÃ¡ na classe `FornecedorServiceImpl`.
 */
public interface FornecedorService {

    /**
     * ðŸ“Œ Cria um novo fornecedor no sistema.
     * ðŸ”„ Recebe um `FornecedorRequestDTO` com os dados enviados pela API e retorna um `FornecedorResponseDTO` com os dados processados.
     */
    FornecedorResponseDTO criarFornecedor(FornecedorRequestDTO dto);

    /**
     * ðŸ“Œ Retorna uma lista de todos os fornecedores cadastrados no sistema.
     */
    List<FornecedorResponseDTO> listarTodosFornecedores();

    /**
     * ðŸ“Œ Busca um fornecedor pelo ID.
     * ðŸ”„ Retorna um `FornecedorResponseDTO` se o fornecedor existir, ou uma exceÃ§Ã£o caso contrÃ¡rio.
     */
    FornecedorResponseDTO buscarFornecedorPeloId(Long id);

    /**
     * ðŸ“Œ Atualiza os dados de um fornecedor existente.
     * ðŸ”„ Recebe o ID do fornecedor e um `FornecedorRequestDTO` com as novas informaÃ§Ãµes.
     */
    FornecedorResponseDTO atualizarFornecedorPeloId(Long id, FornecedorRequestDTO dto);

    /**
     * ðŸ“Œ Deleta um fornecedor pelo ID.
     */
    void deletarFornecedorPeloId(Long id);
}
