package br.com.gerenciador.api.service;

import br.com.gerenciador.api.dto.FornecedorRequestDTO;
import br.com.gerenciador.api.dto.FornecedorResponseDTO;
import br.com.gerenciador.api.mapper.EnderecoMapper;
import br.com.gerenciador.api.mapper.FornecedorMapper;
import br.com.gerenciador.api.model.Fornecedor;
import br.com.gerenciador.api.repository.FornecedorRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

/**
 * üìå Implementa√ß√£o do servi√ßo `FornecedorService`.
 *
 * üöÄ **Por que usamos `@Service`?**
 * ‚úÖ Indica que esta classe faz parte da **camada de servi√ßo** da aplica√ß√£o.
 * ‚úÖ Permite que o Spring gerencie essa classe como um **Bean**, tornando-a injet√°vel em outras partes do c√≥digo.
 * ‚úÖ Segue a arquitetura de **Separation of Concerns** (separa√ß√£o de responsabilidades), mantendo a l√≥gica de neg√≥cios separada do Controller.
 */
@Service // Define essa classe como um Bean de servi√ßo no Spring
@RequiredArgsConstructor // Lombok gera automaticamente um construtor com os atributos `final`
public class FornecedorServiceImpl implements FornecedorService {

    /**
     * üìå **Inje√ß√£o de Depend√™ncia via Construtor**
     *
     * üöÄ **O que √© isso?**
     * ‚úÖ O Spring automaticamente injeta as depend√™ncias necess√°rias nesta classe.
     * ‚úÖ Como os atributos s√£o `final`, o Lombok (com `@RequiredArgsConstructor`) gera um construtor automaticamente.
     * ‚úÖ Essa abordagem √© melhor do que `@Autowired` porque:
     *   - **Garante que a depend√™ncia seja obrigat√≥ria.**
     *   - **Facilita a cria√ß√£o de testes unit√°rios.**
     *   - **Evita c√≥digo boilerplate** (menos c√≥digo repetitivo).
     */
    private final FornecedorRepository fornecedorRepository;
    private final FornecedorMapper fornecedorMapper;
    private final EnderecoMapper enderecoMapper;

    /**
     * üìå Cria√ß√£o de um novo fornecedor.
     *
     * üöÄ **Fluxo deste m√©todo:**
     * 1Ô∏è‚É£ Converte `FornecedorRequestDTO` para a entidade `Fornecedor` usando `FornecedorMapper`.
     * 2Ô∏è‚É£ Salva o fornecedor no banco de dados usando `fornecedorRepository.save()`.
     * 3Ô∏è‚É£ Converte o fornecedor salvo para `FornecedorResponseDTO` para enviar como resposta.
     *
     * üî• **Uso de Mappers:**
     * ‚úÖ `fornecedorMapper.toEntity(dto)`: Converte DTO para Entidade (entrada da API para persist√™ncia no banco).
     * ‚úÖ `fornecedorMapper.toDTO(...)`: Converte Entidade para DTO (dados do banco para resposta da API).
     */
    @Override
    public FornecedorResponseDTO criarFornecedor(FornecedorRequestDTO dto) {
        Fornecedor fornecedor = fornecedorMapper.toEntity(dto); // Converte DTO para Entidade
        return fornecedorMapper.toDTO(fornecedorRepository.save(fornecedor)); // Salva e retorna DTO
    }

    /**
     * üìå Lista todos os fornecedores cadastrados.
     *
     * üöÄ **Fluxo deste m√©todo:**
     * 1Ô∏è‚É£ Busca todos os fornecedores com `findAll()`.
     * 2Ô∏è‚É£ Converte cada entidade `Fornecedor` para `FornecedorResponseDTO` usando `fornecedorMapper.toDTO()`.
     * 3Ô∏è‚É£ Retorna a lista convertida.
     */
    @Override
    public List<FornecedorResponseDTO> listarTodosFornecedores() {
        /*
        O Stream no Java √© uma API introduzida no Java 8 para trabalhar com opera√ß√µes funcionais em cole√ß√µes de dados (como listas e conjuntos)
        de forma mais declarativa e eficiente.
         Ele permite manipular cole√ß√µes de maneira funcional sem precisar usar loops tradicionais (for, while).
         * 1. Chamamos `findAll()` no `fornecedorRepository`, que retorna uma lista de fornecedores (`List<Fornecedor>`).
         * 2. Utilizamos `stream()` para transformar essa lista em um fluxo de dados (`Stream<Fornecedor>`), permitindo opera√ß√µes funcionais.
         * 3. Aplicamos `map(fornecedorMapper::toDTO)`, que percorre cada fornecedor e converte para um `FornecedorResponseDTO` usando o m√©todo `toDTO`.
         * 4. O `toList()` coleta os elementos do stream e os transforma novamente em uma lista (`List<FornecedorResponseDTO>`).
         */
        return fornecedorRepository.findAll().stream()
                .map(fornecedorMapper::toDTO) // Converte cada fornecedor para DTO
                .toList(); // Retorna uma lista de DTOs
    }

    /**
     * üìå Busca um fornecedor pelo ID.
     *
     * üöÄ **Fluxo deste m√©todo:**
     * 1Ô∏è‚É£ Usa `findById(id)` para buscar o fornecedor.
     * 2Ô∏è‚É£ Se n√£o encontrar, lan√ßa uma `ResponseStatusException` com status `404 NOT FOUND`.
     * 3Ô∏è‚É£ Converte a entidade `Fornecedor` para `FornecedorResponseDTO`.
     */
    @Override
    public FornecedorResponseDTO buscarFornecedorPeloId(Long id) {
        /*
        A sintaxe () -> representa Express√µes Lambda, um recurso do Java 8 que permite escrever c√≥digo mais conciso e funcional.
         * 1. Chamamos `findById(id)` no `fornecedorRepository`, que retorna um `Optional<Fornecedor>`.
         * 2. Usamos `.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Fornecedor n√£o encontrado"))`:
         *    - Se o fornecedor for encontrado, retorna o objeto `Fornecedor`.
         *    - Se n√£o for encontrado, lan√ßa uma exce√ß√£o `ResponseStatusException` com status 404 (NOT_FOUND).
         * 3. Convertendo o `Fornecedor` para `FornecedorResponseDTO` usando `fornecedorMapper.toDTO(fornecedor)`.
         */
        Fornecedor fornecedor = fornecedorRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Fornecedor n√£o encontrado")); // Lan√ßa erro se n√£o existir
        return fornecedorMapper.toDTO(fornecedor); // Converte para DTO e retorna
    }

    /**
     * üìå Atualiza um fornecedor existente.
     *
     * üöÄ **Fluxo deste m√©todo:**
     * 1Ô∏è‚É£ Busca o fornecedor pelo ID. Se n√£o existir, lan√ßa erro `404 NOT FOUND`.
     * 2Ô∏è‚É£ Atualiza os atributos do fornecedor com os dados do DTO.
     * 3Ô∏è‚É£ Usa `enderecoMapper.toEntity(dto.endereco())` para converter o endere√ßo DTO para entidade.
     * 4Ô∏è‚É£ Converte o fornecedor atualizado para `FornecedorResponseDTO` e retorna.
     *
     * üî• **Uso da anota√ß√£o `@Transactional`:**
     * ‚úÖ Garante que todas as opera√ß√µes no banco sejam feitas dentro de uma transa√ß√£o.
     * ‚úÖ Se qualquer erro ocorrer, o Spring **desfaz todas as mudan√ßas**, garantindo consist√™ncia dos dados.
     */
    @Transactional
    @Override
    public FornecedorResponseDTO atualizarFornecedorPeloId(Long id, FornecedorRequestDTO dto) {
        Fornecedor fornecedor = fornecedorRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Fornecedor n√£o encontrado"));

        fornecedor.setNome(dto.nome());
        fornecedor.setCnpj(dto.cnpj());
        fornecedor.setTipoFornecedor(dto.tipoFornecedor());
        fornecedor.setEndereco(enderecoMapper.toEntity(dto.endereco())); // Converte DTO de endere√ßo para Entidade

        return fornecedorMapper.toDTO(fornecedor); // Converte para DTO e retorna
    }

    /**
     * üìå Deleta um fornecedor pelo ID.
     *
     * üöÄ **Fluxo deste m√©todo:**
     * 1Ô∏è‚É£ Verifica se o fornecedor existe no banco.
     * 2Ô∏è‚É£ Se n√£o existir, lan√ßa erro `404 NOT FOUND`.
     * 3Ô∏è‚É£ Usa `deleteById(id)` para remover o fornecedor.
     *
     * üî• **Uso da anota√ß√£o `@Transactional`:**
     * ‚úÖ Garante que, se houver um erro no meio da execu√ß√£o, nenhuma opera√ß√£o parcial ser√° aplicada.
     */
    @Transactional
    @Override
    public void deletarFornecedorPeloId(Long id) {
        if (!fornecedorRepository.existsById(id)) { // Verifica se o fornecedor existe antes de deletar
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Fornecedor n√£o encontrado");
        }
        fornecedorRepository.deleteById(id); // Deleta o fornecedor
    }
}
