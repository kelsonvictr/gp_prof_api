package br.com.gerenciador.api.model;

import br.com.gerenciador.api.enums.TipoFornecedorEnum;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

/**
 * ğŸ“Œ Representa a entidade `Fornecedor` no banco de dados.
 *
 * ğŸš€ **O que Ã© uma entidade JPA?**
 * âœ… Uma classe Java que representa uma tabela no banco de dados.
 * âœ… O JPA (Java Persistence API) mapeia essa classe automaticamente para uma tabela SQL.
 * âœ… Cada atributo desta classe serÃ¡ uma **coluna** na tabela `fornecedor`.
 */
@Entity // Indica que esta classe serÃ¡ uma entidade gerenciada pelo JPA
@Table(name = "fornecedor") // Define o nome da tabela no banco
@AllArgsConstructor // Lombok: gera automaticamente um construtor com todos os atributos
@NoArgsConstructor // Lombok: gera automaticamente um construtor vazio (necessÃ¡rio para o JPA)
@Data // Lombok: gera `getters`, `setters`, `toString`, `equals` e `hashCode`
public class Fornecedor {

    /**
     * ğŸ“Œ Chave primÃ¡ria da tabela `fornecedor`.
     *
     * ğŸ›‘ `@Id`: Define que esse campo Ã© a **chave primÃ¡ria**.
     * ğŸ›‘ `@GeneratedValue(strategy = GenerationType.IDENTITY)`:
     *    - O banco de dados **gera o ID automaticamente** quando um novo fornecedor Ã© salvo.
     *    - `IDENTITY` significa que o ID serÃ¡ gerado pelo prÃ³prio banco (autoincremento).
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * ğŸ“Œ Nome do fornecedor.
     * ğŸ”¹ `nullable = false`: Campo **obrigatÃ³rio**.
     * ğŸ”¹ `length = 100`: Nome pode ter atÃ© **100 caracteres**.
     */
    @Column(name = "nome", nullable = false, length = 100)
    private String nome;

    /**
     * ğŸ“Œ CNPJ do fornecedor.
     * ğŸ”¹ `nullable = false`: O CNPJ **Ã© obrigatÃ³rio**.
     * ğŸ”¹ `unique = true`: O CNPJ **nÃ£o pode se repetir** (garante que nÃ£o haja duplicatas).
     * ğŸ”¹ `length = 14`: CNPJ deve ter **exatamente 14 dÃ­gitos**.
     * ğŸ”¹ `updatable = false`: O CNPJ **nÃ£o pode ser alterado depois de cadastrado**.
     */
    @Column(name = "cnpj", nullable = false, unique = true, length = 14, updatable = false)
    private String cnpj;

    /**
     * ğŸ“Œ Tipo do fornecedor (COMUM ou PREMIUM).
     *
     * ğŸ”¹ `nullable = false`: O campo **Ã© obrigatÃ³rio**.
     * ğŸ”¹ `@Enumerated(EnumType.STRING)`:
     *    - Armazena o valor do Enum como **texto** no banco (`"COMUM"` ou `"PREMIUM"`).
     *    - Se nÃ£o usarmos essa anotaÃ§Ã£o, o JPA pode armazenar os valores como nÃºmeros (0,1...), dificultando a leitura.
     */
    @Column(name = "tipo_fornecedor", nullable = false)
    @Enumerated(EnumType.STRING)
    private TipoFornecedorEnum tipoFornecedor;

    /**
     * ğŸ“Œ RelaÃ§Ã£o **One-to-One** (Um fornecedor tem UM endereÃ§o).
     *
     * ğŸ›‘ `@OneToOne`: Define que um fornecedor **possui apenas um endereÃ§o**.
     *
     * ğŸ”¹ `cascade = CascadeType.ALL`:
     *    - Garante que qualquer operaÃ§Ã£o (inserÃ§Ã£o, atualizaÃ§Ã£o ou remoÃ§Ã£o) no fornecedor **afete o endereÃ§o automaticamente**.
     *    - Por exemplo, se deletarmos um fornecedor, o endereÃ§o dele tambÃ©m serÃ¡ deletado.
     *
     * ğŸ”¹ `@JoinColumn(name = "endereco_id", referencedColumnName = "id")`:
     *    - Define a chave estrangeira (`endereco_id`) que relaciona essa tabela com a tabela `endereco`.
     *    - `referencedColumnName = "id"` indica que o campo `id` da tabela `endereco` Ã© a referÃªncia.
     */
    @OneToOne(cascade = CascadeType.ALL) // Define a relaÃ§Ã£o 1-para-1 e propaga operaÃ§Ãµes entre as entidades
    @JoinColumn(name = "endereco_id", referencedColumnName = "id") // Define a chave estrangeira
    private Endereco endereco;

    /**
     * ğŸ“Œ Data de criaÃ§Ã£o do fornecedor.
     *
     * ğŸ”¹ `nullable = false`: O campo **Ã© obrigatÃ³rio**.
     * ğŸ”¹ `updatable = false`: A data **nÃ£o pode ser alterada apÃ³s a criaÃ§Ã£o**.
     * ğŸ”¹ `@CreationTimestamp`: Hibernate insere **automaticamente** a data e hora no momento da criaÃ§Ã£o do registro.
     */
    @Column(name = "criado_em", nullable = false, updatable = false)
    @CreationTimestamp
    private LocalDateTime criadoEm;

    /**
     * ğŸ“Œ Data da Ãºltima atualizaÃ§Ã£o do fornecedor.
     *
     * ğŸ”¹ `@UpdateTimestamp`: Hibernate **atualiza automaticamente** esse campo sempre que a entidade for modificada.
     */
    @Column(name = "atualizado_em")
    @UpdateTimestamp
    private LocalDateTime atualizadoEm;
}
