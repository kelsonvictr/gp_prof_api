package br.com.gerenciador.api.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.io.Serializable;

/**
 * ğŸ“Œ Representa a entidade `Endereco` no banco de dados.
 *
 * ğŸš€ **O que Ã© uma entidade JPA?**
 * âœ… Uma classe Java que representa uma tabela no banco de dados.
 * âœ… O JPA (Java Persistence API) mapeia essa classe para uma tabela SQL automaticamente.
 * âœ… Cada atributo desta classe serÃ¡ uma **coluna** na tabela `endereco`.
 * âœ… O Spring Boot, junto com o Hibernate (implementaÃ§Ã£o do JPA), gerencia essa entidade.
 */
@Entity // Indica que esta classe Ã© uma entidade JPA e serÃ¡ mapeada para uma tabela no banco de dados
@Table(name = "endereco") // Define o nome da tabela no banco de dados
@NoArgsConstructor // Gera automaticamente um construtor vazio (necessÃ¡rio para o JPA)
@AllArgsConstructor // Gera automaticamente um construtor com todos os atributos
@Data // Lombok: gera automaticamente `getters`, `setters`, `toString`, `equals` e `hashCode`
public class Endereco implements Serializable { // Serializable permite que o objeto seja convertido em bytes (necessÃ¡rio para algumas operaÃ§Ãµes, como cache e comunicaÃ§Ã£o entre sistemas)

    /**
     * ğŸ“Œ Chave primÃ¡ria da tabela `endereco`.
     *
     * ğŸ›‘ `@Id`: Indica que este campo Ã© a chave primÃ¡ria da entidade.
     * ğŸ›‘ `@GeneratedValue(strategy = GenerationType.IDENTITY)`:
     *    - Garante que o banco de dados **gere automaticamente o ID** ao inserir um novo endereÃ§o.
     *    - `IDENTITY` significa que o ID Ã© gerado pelo prÃ³prio banco e nÃ£o pelo Hibernate.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * ğŸ“Œ Logradouro (rua, avenida, etc.).
     * ğŸ”¹ `@Column(name = "logradouro")`: Define o nome da coluna no banco.
     * ğŸ”¹ `nullable = false`: O campo **nÃ£o pode ser nulo**.
     * ğŸ”¹ `length = 150`: Define o **tamanho mÃ¡ximo** de 150 caracteres.
     */
    @Column(name = "logradouro", nullable = false, length = 150)
    private String logradouro;

    /**
     * ğŸ“Œ NÃºmero do endereÃ§o.
     * ğŸ”¹ `nullable = false`: O nÃºmero **Ã© obrigatÃ³rio**.
     * ğŸ”¹ `length = 10`: Permite valores curtos como "12A", "4500", "S/N".
     */
    @Column(name = "numero", nullable = false, length = 10)
    private String numero;

    /**
     * ğŸ“Œ Complemento (opcional).
     * ğŸ”¹ `length = 50`: MÃ¡ximo de 50 caracteres.
     * ğŸ”¹ **NÃ£o usamos `nullable = false`**, pois o complemento Ã© opcional.
     */
    @Column(name = "complemento", length = 50)
    private String complemento;

    /**
     * ğŸ“Œ Bairro.
     * ğŸ”¹ ObrigatÃ³rio (`nullable = false`).
     * ğŸ”¹ Limitado a 50 caracteres (`length = 50`).
     */
    @Column(name = "bairro", nullable = false, length = 50)
    private String bairro;

    /**
     * ğŸ“Œ Cidade.
     * ğŸ”¹ ObrigatÃ³rio (`nullable = false`).
     * ğŸ”¹ Limitado a 50 caracteres.
     */
    @Column(name = "cidade", nullable = false, length = 50)
    private String cidade;

    /**
     * ğŸ“Œ Estado.
     * ğŸ”¹ ObrigatÃ³rio (`nullable = false`).
     * ğŸ”¹ Limitado a 50 caracteres.
     */
    @Column(name = "estado", nullable = false, length = 50)
    private String estado;

    /**
     * ğŸ“Œ PaÃ­s.
     * ğŸ”¹ ObrigatÃ³rio (`nullable = false`).
     * ğŸ”¹ Limitado a 50 caracteres.
     */
    @Column(name = "pais", nullable = false, length = 50)
    private String pais;

    /**
     * ğŸ“Œ CÃ³digo Postal (CEP).
     * ğŸ”¹ ObrigatÃ³rio (`nullable = false`).
     * ğŸ”¹ Limitado a 20 caracteres (`length = 20`), pois alguns paÃ­ses possuem CEPs longos.
     */
    @Column(name = "cep", nullable = false, length = 20)
    private String cep;

}
